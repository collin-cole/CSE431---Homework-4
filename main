import numpy as np
import matplotlib.pyplot as plt
import timeit



def insertionSort(arr):
 
    # Traverse through 1 to len(arr)
    for i in range(1, len(arr)):
 
        key = arr[i]
 
        # Move elements of arr[0..i-1], that are
        # greater than key, to one position ahead
        # of their current position
        j = i-1
        while j >=0 and key < arr[j] :
                arr[j+1] = arr[j]
                j -= 1
        arr[j+1] = key

def mergeSort(arr):
    if len(arr) > 1:
 
         # Finding the mid of the array
        mid = len(arr)//2
 
        # Dividing the array elements
        L = arr[:mid]
 
        # into 2 halves
        R = arr[mid:]
 
        # Sorting the first half
        mergeSort(L)
 
        # Sorting the second half
        mergeSort(R)
 
        i = j = k = 0
 
        # Copy data to temp arrays L[] and R[]
        while i < len(L) and j < len(R):
            if L[i] <= R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1
 
        # Checking if any element was left
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1
 
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1

test2000 = np.arange(2000)
test4000 = np.arange(4000)
test6000 = np.arange(6000)
test8000 = np.arange(8000)
test10000 = np.arange(10000)

np.random.shuffle(test2000)
np.random.shuffle(test4000)
np.random.shuffle(test6000)
np.random.shuffle(test8000)
np.random.shuffle(test10000)

is_times = []
is_times.append(timeit.timeit("insertionSort(test2000)",'from __main__ import insertionSort, test2000', number = 10))
is_times.append(timeit.timeit("insertionSort(test4000)",'from __main__ import insertionSort, test4000', number = 10))
is_times.append(timeit.timeit("insertionSort(test6000)",'from __main__ import insertionSort, test6000', number = 10))
is_times.append(timeit.timeit("insertionSort(test8000)",'from __main__ import insertionSort, test8000', number = 10))
is_times.append(timeit.timeit("insertionSort(test10000)",'from __main__ import insertionSort, test10000', number = 10))

np.random.shuffle(test2000)
np.random.shuffle(test4000)
np.random.shuffle(test6000)
np.random.shuffle(test8000)
np.random.shuffle(test10000)

ms_times = []
ms_times.append(timeit.timeit("mergeSort(test2000)",'from __main__ import mergeSort, test2000', number = 10))
ms_times.append(timeit.timeit("mergeSort(test4000)",'from __main__ import mergeSort, test4000', number = 10))
ms_times.append(timeit.timeit("mergeSort(test6000)",'from __main__ import mergeSort, test6000', number = 10))
ms_times.append(timeit.timeit("mergeSort(test8000)",'from __main__ import mergeSort, test8000', number = 10))
ms_times.append(timeit.timeit("mergeSort(test10000)",'from __main__ import mergeSort, test10000', number = 10))

test_sizes = [2000, 4000, 6000, 8000, 10000]
test_size_labels = ['2000', '4000', '6000','8000', '10000']

 
x_axis = np.arange(len(test_size_labels))
x_axis2 = np.arange(len(test_size_labels))

plt.bar(x_axis - 0.2, is_times, edgecolor='black', width=0.4, label = 'Insertion Sort', color="green")
plt.bar(x_axis2 + 0.2, ms_times, edgecolor='black', width=0.4, label = 'Merge Sort', color="white")
 
plt.xticks(x_axis, test_sizes)
plt.xlabel("Data Size")
plt.ylabel("Time Taken")
plt.title("Insertion Sort vs Merge Sort")
plt.legend()
plt.show()