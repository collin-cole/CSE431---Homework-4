import numpy as np
import matplotlib.pyplot as plt
import timeit

def ogInsertionSort(arr):
 
    # Traverse through 1 to len(arr)
    for i in range(1, len(arr)):
 
        key = arr[i]
 
        # Move elements of arr[0..i-1], that are
        # greater than key, to one position ahead
        # of their current position
        j = i-1
        while j >=0 and key < arr[j] :
                arr[j+1] = arr[j]
                j -= 1
        arr[j+1] = key

def mergeSort(arr):
    if len(arr) > 1:
 
         # Finding the mid of the array
        mid = len(arr)//2
 
        # Dividing the array elements
        L = arr[:mid]
 
        # into 2 halves
        R = arr[mid:]
 
        # Sorting the first half
        mergeSort(L)
 
        # Sorting the second half
        mergeSort(R)
 
        i = j = k = 0
 
        # Copy data to temp arrays L[] and R[]
        while i < len(L) and j < len(R):
            if L[i] <= R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1
 
        # Checking if any element was left
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1
 
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1


# Python3 program to perform basic timSort
MIN_MERGE = 32
 
 
def calcMinRun(n):
    """Returns the minimum length of a
    run from 23 - 64 so that
    the len(array)/minrun is less than or
    equal to a power of 2.
 
    e.g. 1=>1, ..., 63=>63, 64=>32, 65=>33,
    ..., 127=>64, 128=>32, ...
    """
    r = 0
    while n >= MIN_MERGE:
        r |= n & 1
        n >>= 1
    return n + r
 
 
# This function sorts array from left index to
# to right index which is of size atmost RUN
def insertionSort(arr, left, right):
    for i in range(left + 1, right + 1):
        j = i
        while j > left and arr[j] < arr[j - 1]:
            arr[j], arr[j - 1] = arr[j - 1], arr[j]
            j -= 1
 
 
# Merge function merges the sorted runs
def merge(arr, l, m, r):
 
    # original array is broken in two parts
    # left and right array
    len1, len2 = m - l + 1, r - m
    left, right = [], []
    for i in range(0, len1):
        left.append(arr[l + i])
    for i in range(0, len2):
        right.append(arr[m + 1 + i])
 
    i, j, k = 0, 0, l
 
    # after comparing, we merge those two array
    # in larger sub array
    while i < len1 and j < len2:
        if left[i] <= right[j]:
            arr[k] = left[i]
            i += 1
 
        else:
            arr[k] = right[j]
            j += 1
 
        k += 1
 
    # Copy remaining elements of left, if any
    while i < len1:
        arr[k] = left[i]
        k += 1
        i += 1
 
    # Copy remaining element of right, if any
    while j < len2:
        arr[k] = right[j]
        k += 1
        j += 1
 
 
# Iterative Timsort function to sort the
# array[0...n-1] (similar to merge sort)
def timSort(arr):
    n = len(arr)
    minRun = calcMinRun(n)
 
    # Sort individual subarrays of size RUN
    for start in range(0, n, minRun):
        end = min(start + minRun - 1, n - 1)
        insertionSort(arr, start, end)
 
    # Start merging from size RUN (or 32). It will merge
    # to form size 64, then 128, 256 and so on ....
    size = minRun
    while size < n:
 
        # Pick starting point of left sub array. We
        # are going to merge arr[left..left+size-1]
        # and arr[left+size, left+2*size-1]
        # After every merge, we increase left by 2*size
        for left in range(0, n, 2 * size):
 
            # Find ending point of left sub array
            # mid+1 is starting point of right sub array
            mid = min(n - 1, left + size - 1)
            right = min((left + 2 * size - 1), (n - 1))
 
            # Merge sub array arr[left.....mid] &
            # arr[mid+1....right]
            if mid < right:
                merge(arr, left, mid, right)
 
        size = 2 * size
 

test100 = np.arange(100)
test200 = np.arange(200)
test300 = np.arange(300)
test400 = np.arange(400)
test500 = np.arange(500)
test600 = np.arange(600)
test700 = np.arange(700)
test800 = np.arange(800)
test900 = np.arange(900)
test1000 = np.arange(1000)
test1200 = np.arange(1200)
test1400 = np.arange(1400)
test1600 = np.arange(1600)
test1800 = np.arange(1800)
test2000 = np.arange(2000)

def shuffler():
    np.random.shuffle(test100)
    np.random.shuffle(test200)
    np.random.shuffle(test300)
    np.random.shuffle(test400)
    np.random.shuffle(test500)
    np.random.shuffle(test600)
    np.random.shuffle(test700)
    np.random.shuffle(test800)
    np.random.shuffle(test900)
    np.random.shuffle(test1000)
    np.random.shuffle(test1200)
    np.random.shuffle(test1400)
    np.random.shuffle(test1600)    
    np.random.shuffle(test1800)
    np.random.shuffle(test2000)

shuffler()

is_times = []
is_times.append(timeit.timeit("ogInsertionSort(test100)",'from __main__ import ogInsertionSort, test100', number = 10))
is_times.append(timeit.timeit("ogInsertionSort(test200)",'from __main__ import ogInsertionSort, test200', number = 10))
is_times.append(timeit.timeit("ogInsertionSort(test300)",'from __main__ import ogInsertionSort, test300', number = 10))
is_times.append(timeit.timeit("ogInsertionSort(test400)",'from __main__ import ogInsertionSort, test400', number = 10))
is_times.append(timeit.timeit("ogInsertionSort(test500)",'from __main__ import ogInsertionSort, test500', number = 10))
is_times.append(timeit.timeit("ogInsertionSort(test600)",'from __main__ import ogInsertionSort, test600', number = 10))
is_times.append(timeit.timeit("ogInsertionSort(test700)",'from __main__ import ogInsertionSort, test700', number = 10))
is_times.append(timeit.timeit("ogInsertionSort(test800)",'from __main__ import ogInsertionSort, test800', number = 10))
is_times.append(timeit.timeit("ogInsertionSort(test900)",'from __main__ import ogInsertionSort, test900', number = 10))
is_times.append(timeit.timeit("ogInsertionSort(test1000)",'from __main__ import ogInsertionSort, test1000', number = 10))
is_times.append(timeit.timeit("ogInsertionSort(test1200)",'from __main__ import ogInsertionSort, test1200', number = 10))
is_times.append(timeit.timeit("ogInsertionSort(test1400)",'from __main__ import ogInsertionSort, test1400', number = 10))
is_times.append(timeit.timeit("ogInsertionSort(test1600)",'from __main__ import ogInsertionSort, test1600', number = 10))
is_times.append(timeit.timeit("ogInsertionSort(test1800)",'from __main__ import ogInsertionSort, test1800', number = 10))
is_times.append(timeit.timeit("ogInsertionSort(test2000)",'from __main__ import ogInsertionSort, test2000', number = 10))

shuffler()

ms_times = []
ms_times.append(timeit.timeit("mergeSort(test100)",'from __main__ import mergeSort, test100', number = 10))
ms_times.append(timeit.timeit("mergeSort(test200)",'from __main__ import mergeSort, test200', number = 10))
ms_times.append(timeit.timeit("mergeSort(test300)",'from __main__ import mergeSort, test300', number = 10))
ms_times.append(timeit.timeit("mergeSort(test400)",'from __main__ import mergeSort, test400', number = 10))
ms_times.append(timeit.timeit("mergeSort(test500)",'from __main__ import mergeSort, test500', number = 10))
ms_times.append(timeit.timeit("mergeSort(test600)",'from __main__ import mergeSort, test600', number = 10))
ms_times.append(timeit.timeit("mergeSort(test700)",'from __main__ import mergeSort, test700', number = 10))
ms_times.append(timeit.timeit("mergeSort(test800)",'from __main__ import mergeSort, test800', number = 10))
ms_times.append(timeit.timeit("mergeSort(test900)",'from __main__ import mergeSort, test900', number = 10))
ms_times.append(timeit.timeit("mergeSort(test1000)",'from __main__ import mergeSort, test1000', number = 10))
ms_times.append(timeit.timeit("mergeSort(test1200)",'from __main__ import mergeSort, test1200', number = 10))
ms_times.append(timeit.timeit("mergeSort(test1400)",'from __main__ import mergeSort, test1400', number = 10))
ms_times.append(timeit.timeit("mergeSort(test1600)",'from __main__ import mergeSort, test1600', number = 10))
ms_times.append(timeit.timeit("mergeSort(test1800)",'from __main__ import mergeSort, test1800', number = 10))
ms_times.append(timeit.timeit("mergeSort(test2000)",'from __main__ import mergeSort, test2000', number = 10))

shuffler()

hs_times = []
hs_times.append(timeit.timeit("timSort(test100)",'from __main__ import timSort, insertionSort, calcMinRun, merge, MIN_MERGE, test100', number = 10))
hs_times.append(timeit.timeit("timSort(test200)",'from __main__ import timSort, insertionSort, calcMinRun, merge, MIN_MERGE, test200', number = 10))
hs_times.append(timeit.timeit("timSort(test300)",'from __main__ import timSort, insertionSort, calcMinRun, merge, MIN_MERGE, test300', number = 10))
hs_times.append(timeit.timeit("timSort(test400)",'from __main__ import timSort, insertionSort, calcMinRun, merge, MIN_MERGE, test400', number = 10))
hs_times.append(timeit.timeit("timSort(test500)",'from __main__ import timSort, insertionSort, calcMinRun, merge, MIN_MERGE, test500', number = 10))
hs_times.append(timeit.timeit("timSort(test600)",'from __main__ import timSort, insertionSort, calcMinRun, merge, MIN_MERGE, test600', number = 10))
hs_times.append(timeit.timeit("timSort(test700)",'from __main__ import timSort, insertionSort, calcMinRun, merge, MIN_MERGE, test700', number = 10))
hs_times.append(timeit.timeit("timSort(test800)",'from __main__ import timSort, insertionSort, calcMinRun, merge, MIN_MERGE, test800', number = 10))
hs_times.append(timeit.timeit("timSort(test900)",'from __main__ import timSort, insertionSort, calcMinRun, merge, MIN_MERGE, test900', number = 10))
hs_times.append(timeit.timeit("timSort(test1000)",'from __main__ import timSort, insertionSort, calcMinRun, merge, MIN_MERGE, test1000', number = 10))
hs_times.append(timeit.timeit("timSort(test1200)",'from __main__ import timSort, insertionSort, calcMinRun, merge, MIN_MERGE, test1200', number = 10))
hs_times.append(timeit.timeit("timSort(test1400)",'from __main__ import timSort, insertionSort, calcMinRun, merge, MIN_MERGE, test1400', number = 10))
hs_times.append(timeit.timeit("timSort(test1600)",'from __main__ import timSort, insertionSort, calcMinRun, merge, MIN_MERGE, test1600', number = 10))
hs_times.append(timeit.timeit("timSort(test1800)",'from __main__ import timSort, insertionSort, calcMinRun, merge, MIN_MERGE, test1800', number = 10))
hs_times.append(timeit.timeit("timSort(test2000)",'from __main__ import timSort, insertionSort, calcMinRun, merge, MIN_MERGE, test2000', number = 10))

test_sizes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1200, 1400, 1600, 1800, 2000]
test_size_labels = ['100', '200', '300', '400', '500', '600', '700', '800', '900', '1000', '1200', '1400', '1600', '1800', '2000']
 
x_axis = np.arange(len(test_size_labels))

plt.bar(x_axis - 0.15, is_times, edgecolor='black', width=0.15, label = 'Insertion Sort', color="black")
plt.bar(x_axis + 0.15, ms_times, edgecolor='black', width=0.15, label = 'Merge Sort', color="white")
plt.bar(x_axis, hs_times, edgecolor='black', width=0.15, label = 'Hybrid Sort', color="orange")

 
plt.xticks(x_axis, test_sizes)
plt.xlabel("Data Size")
plt.ylabel("Time Taken")
plt.title("Comparison of Insertion Sort, Merge Sort, and a hybrid of the two.")
plt.legend()
plt.show()